{
  "hero": {
    "name": "Simon Arapoglu",
    "title": "Software-Entwickler",
    "description": "Ich entwickle Software und Videospiele. Ich experimentiere gerne mit neuen Technologien und probiere verschiedene Ansätze aus, um die bestmögliche Lösung zu finden. Schauen Sie sich um und spielen Sie einige Spiele direkt in Ihrem Browser!"
  },
  "navigation": {
    "home": "Startseite",
    "projects": "Projekte",
    "games": "Spiele",
    "skills": "Fähigkeiten",
    "contact": "Kontakt"
  },
  "projects": {
    "viewCode": "Code ansehen",
    "viewAll": "Alle Projekte ansehen",
    "title": "Ausgewählte Projekte",
    "allProjectsTitle": "Alle Projekte",
    "description": "Hier sind einige der Projekte, an denen ich gearbeitet habe",
    "viewProject": "Projekt ansehen",
    "technologies": "Technologien",
    "gallery": "Projektgalerie",
    "about": "Über dieses Projekt"
  },
  "games": {
    "viewCode": "Code ansehen",
    "viewAll": "Alle Spiele ansehen",
    "title": "Ausgewählte Spiele",
    "allGamesTitle": "Alle Spiele",
    "description": "Spiele, die ich in verschiedenen Engines entwickelt habe",
    "viewGame": "Spiel ansehen",
    "playGame": "Spiel spielen",
    "playableInBrowser": "Im Browser spielbar",
    "downloadOnItch": "Auf itch herunterladen",
    "engine": "Engine",
    "genre": "Genre",
    "technologies": "Technologien",
    "gallery": "Spielegalerie",
    "about": "Über dieses Spiel"
  },
  "skills": {
    "title": "Fähigkeiten & Technologien",
    "description": "Technologien, mit denen ich arbeite"
  },
  "contact": {
    "resume": "Lebenslauf ansehen",
    "title": "Kontakt aufnehmen",
    "description": "Zögern Sie nicht, sich zu melden, wenn Sie zusammenarbeiten möchten oder einfach nur Hallo sagen wollen!",
    "email": "Kontakt aufnehmen",
    "github": "GitHub",
    "linkedin": "LinkedIn"
  },
  "common": {
    "loading": "Lädt...",
    "error": "Ein Fehler ist aufgetreten",
    "notFound": "Seite nicht gefunden"
  },
  "projectFeatures": {
    "title": "Hauptfunktionen"
  },
  "projectsData": {
    "zilo": {
      "title": "Zilo Text Editor",
      "description": "Eine Neuimplementierung des kilo Text Editors, geschrieben in der Zig Programmiersprache.",
      "fullDescription": "Zilo ist ein Terminal-Texteditor. Er beinhaltet Syntaxhervorhebung und Suchfunktionalität, alles angetrieben von der Zig Programmiersprache.",
      "imagesCaptions": {
        "main": "Hauptoberfläche des Editors mit Syntaxhervorhebung",
        "search": "Integrierte Such- und Ersetzungsfunktionalität",
        "terminal": "Nahtlose Terminal-Integration"
      },
      "features": {
        "syntaxHighlighting": "Syntaxhervorhebung",
        "syntaxHighlightingDesc": "Syntaxhervorhebung für C und Zig.",
        "searchReplace": "Suchen & Ersetzen",
        "searchReplaceDesc": "Mächtige Such- und Ersetzungsfunktionalität mit Regex-Unterstützung und Groß-/Kleinschreibungsoptionen.",
        "terminalIntegration": "Terminal-Integration",
        "terminalIntegrationDesc": "Nahtlose Integration in die Terminal-Umgebung für effizienten Arbeitsablauf.",
        "lightweightFast": "Leichtgewichtig & Schnell",
        "lightweightFastDesc": "Für Performance optimiert mit minimaler Ressourcennutzung und schnellen Startzeiten."
      }
    },
    "c8-serenityos": {
      "title": "CHIP-8 Emulator für SerenityOS",
      "description": "Eine CHIP-8 Emulator-Implementierung, die speziell für das SerenityOS-Betriebssystem entwickelt wurde.",
      "fullDescription": "Dieses Projekt ist ein vollständiger CHIP-8 Emulator, der für SerenityOS entwickelt wurde und präzise CPU-Emulation, Grafik-Rendering und Sound-Unterstützung bietet. CHIP-8 ist eine einfache virtuelle Maschine, die in den 1970er Jahren für die Programmierung von Spielen entworfen wurde, und dieser Emulator bringt diese klassischen Spiele mit pixelgenauer Genauigkeit auf die moderne SerenityOS-Plattform.",
      "imagesCaptions": {
        "emulator": "CHIP-8 Emulator Hauptoberfläche mit ROM-Auswahl",
        "gameplay": "Klassisches CHIP-8 Spiel läuft mit flüssigem Rendering",
        "debugger": "Eingebauter Debugger zeigt CPU-Zustand und Speicher"
      },
      "features": {
        "cpuEmulation": "Präzise CPU-Emulation",
        "cpuEmulationDesc": "Genaue Implementierung des CHIP-8 Befehlssatzes mit zyklusgenauen Timing und ordnungsgemäßer Register-Behandlung.",
        "graphicsRendering": "Grafik-Rendering",
        "graphicsRenderingDesc": "Pixelgenaue 64x32 Monochrom-Display-Darstellung mit ordnungsgemäßer Sprite-Kollisionserkennung.",
        "soundSystem": "Sound-System",
        "soundSystemDesc": "Authentische Piep-Ton-Generierung entsprechend den ursprünglichen CHIP-8 Spezifikationen.",
        "debuggerTools": "Debugging-Tools",
        "debuggerToolsDesc": "Eingebauter Debugger mit Disassembly-Ansicht, Register-Inspektion und schrittweiser Ausführung."
      }
    },
    "spring-library-api": {
      "title": "Spring Bibliotheksverwaltungs-API",
      "description": "Eine umfassende REST-API für Bibliotheksverwaltung, entwickelt mit Spring Boot und Java.",
      "fullDescription": "Dieses Projekt ist ein vollständiges Backend-System für Bibliotheksverwaltung, das mit Spring Boot entwickelt wurde. Es bietet REST-API-Endpunkte für die Verwaltung von Büchern, Autoren, Ausleihern und Leihvorgängen. Das System umfasst ordnungsgemäße Datenvalidierung, Ausnahmebehandlung und folgt REST-Prinzipien für sauberes API-Design. Perfekt zum Erlernen von Spring Boot-Konzepten oder als Grundlage für größere Bibliotheksverwaltungssysteme.",
      "imagesCaptions": {
        "apiEndpoints": "REST-API-Endpunkte für Buch- und Benutzerverwaltung",
        "database": "Entity-Relationship-Diagramm der Datenstruktur",
        "documentation": "Interaktive API-Dokumentation mit Swagger"
      },
      "features": {
        "restfulApi": "RESTful API Design",
        "restfulApiDesc": "Saubere und intuitive REST-API nach Industriestandards mit ordnungsgemäßen HTTP-Methoden und Statuscodes.",
        "databaseIntegration": "Datenbank-Integration",
        "databaseIntegrationDesc": "Nahtlose Integration mit MongoDB unter Verwendung von JPA und Hibernate für effizientes Datenmanagement.",
        "crudOperations": "Vollständige CRUD-Operationen", 
        "crudOperationsDesc": "Vollständige Erstellen-, Lesen-, Aktualisieren-, Löschen-Funktionalität für Bücher, Autoren und Ausleihaufzeichnungen.",
        "apiDocumentation": "API-Dokumentation",
        "apiDocumentationDesc": "Umfassende API-Dokumentation."
      }
    },
    "socket-fun": {
      "title": "SocketFun",
      "description": "Experimente mit Sockets in C unter Linux, mit Echo- und Chat-Servern mit gleichzeitiger Verbindungsbehandlung.",
      "fullDescription": "SocketFun ist ein Lernprojekt, das Socket-Programmierung in C unter Linux erforscht. Es umfasst sowohl eine Echo-Server/Client- als auch eine Chat-Server/Client-Implementierung und demonstriert die gleichzeitige Verbindungsbehandlung mit epoll(). Das Projekt zeigt Low-Level-Netzwerkprogrammierungskonzepte und effiziente I/O-Multiplexing-Techniken für die Behandlung mehrerer Client-Verbindungen gleichzeitig.",
      "imageCaptions": {
        "implementation": "C Socket-Programmierung Implementierung",
        "echo": "Echo-Server reflektiert Client-Nachrichten",
        "chat": "Multi-Client-Chat-Server in Aktion",
        "concurrent": "epoll() behandelt gleichzeitige Verbindungen"
      },
      "features": {
        "echoServer": "Echo-Server",
        "echoServerDesc": "TCP Echo-Server, der Client-Nachrichten zurücksendet und grundlegende Client-Server-Kommunikationsmuster demonstriert.",
        "chatServer": "Chat-Server",
        "chatServerDesc": "Multi-Client-Chat-Server ermöglicht Echtzeitkommunikation zwischen verbundenen Clients.",
        "concurrentConnections": "Gleichzeitige Verbindungen", 
        "concurrentConnectionsDesc": "Unterstützung für bis zu 128 gleichzeitige Client-Verbindungen mit effizientem I/O-Multiplexing.",
        "epollHandling": "epoll() Implementierung",
        "epollHandlingDesc": "Hochleistungs-ereignisgesteuertes I/O unter Verwendung von Linux epoll() für skalierbare Netzwerkanwendungen."
      }
    },
    "world-launcher": {
      "title": "World-Launcher",
      "description": "Ein Windows-Launcher für Super Mario World ROM-Hacks mit integrierten Patching-Funktionen mit Floating IPS.",
      "fullDescription": "World-Launcher ist eine umfassende Windows-Anwendung für Super Mario World ROM-Hack-Enthusiasten. Sie kombiniert ROM-Patching-Funktionalität mit einer benutzerfreundlichen Launcher-Oberfläche, die es Benutzern ermöglicht, ROM-Dateien einfach mit .bps- oder .ips-Patches zu patchen und sie direkt in ihrem bevorzugten SNES-Emulator zu starten. Die Anwendung integriert Floating IPS von Alcaro für zuverlässiges ROM-Patching und bietet nahtlose Emulator-Integration für ein verbessertes Spielerlebnis.",
      "imageCaptions": {
        "interface": "Saubere Windows Forms-Oberfläche für ROM-Verwaltung",
        "patching": "Automatisiertes ROM-Patching mit Floating IPS-Integration",
        "launcher": "Spiele-Launcher zeigt verfügbare ROM-Hacks an",
        "emulator": "Direkte Emulator-Integration mit Vollbild-Optionen"
      },
      "features": {
        "romPatching": "ROM-Patching",
        "romPatchingDesc": "Integrierter Floating IPS-Patcher unterstützt .bps- und .ips-Patch-Formate für zuverlässige ROM-Modifikationen.",
        "gameLauncher": "Spiele-Launcher",
        "gameLauncherDesc": "Benutzerfreundliche Launcher-Oberfläche zum Organisieren und Starten von ROM-Hacks direkt aus der Anwendung.",
        "emulatorIntegration": "Emulator-Integration",
        "emulatorIntegrationDesc": "Nahtlose Integration mit SNES-Emulatoren wie Snes9x, mit Vollbild-Start-Optionen.",
        "userFriendlyInterface": "Benutzerfreundliche Oberfläche",
        "userFriendlyInterfaceDesc": "Intuitive Windows Forms-Oberfläche macht ROM-Hack-Verwaltung für alle Benutzer zugänglich."
      }
    }
  },
  "gamesData": {
    "shooty": {
      "title": "Shooty",
      "description": "Ein schnelles Arcade-Shooter-Spiel, das in Zig mit Raylib geschrieben wurde.",
      "fullDescription": "Shooty ist ein schnelles Arcade-Shooter-Spiel, das mit Zig und Raylib entwickelt wurde. Die Spieler steuern ein Raumschiff und kämpfen gegen Wellen von Feinden in intensiven Arcade-Kämpfen. Mit flüssigen Sprite-Animationen, präziser Kollisionserkennung und fesselnden Gameplay-Mechaniken.",
      "imageCaptions": {
        "gameplay": "Intensive Arcade-Shooter-Action",
        "shooting": "Spieler-Raumschiff feuert auf Feinde",
        "enemies": "Herausfordernde Gegner-KI-Muster",
        "gameover": "Game-Over-Bildschirm mit Endpunktzahl"
      },
      "features": {
        "spriteAnimation": "Sprite-Animation",
        "spriteAnimationDesc": "Fließende und flüssige Sprite-Animationen für Charaktere, Projektile und visuelle Effekte.",
        "collisionDetection": "Kollisionserkennung",
        "collisionDetectionDesc": "Präzises Kollisionserkennungssystem für genaue Treffererkennung und Gameplay-Interaktionen.",
        "scoreSystem": "Punktesystem",
        "scoreSystemDesc": "Dynamisches Punktesystem mit Kombinations-Multiplikatoren und Bonuspunkten für geschicktes Spiel.",
        "soundEffects": "Soundeffekte",
        "soundEffectsDesc": "Immersives Audio-Feedback mit Schussgeräuschen, Explosionen und Hintergrundmusik."
      }
    },
    "pirate-game-jam-2025": {
      "title": "Living Armory",
      "description": "Ein Unity WebGL-Spiel, das für den Pirate Software Game Jam 2025 entwickelt wurde und direkt im Browser spielbar ist.",
      "fullDescription": "Living Armory ist ein aufregendes Game-Jam-Projekt, das für den Pirate Software Game Jam 2025 erstellt wurde. Dieses Unity WebGL-Projekt demonstriert die Fähigkeit, schnell Prototypen zu erstellen und ein vollständiges Spielkonzept innerhalb der Beschränkungen eines Game-Jam-Zeitrahmens zu entwickeln. Das Spiel ist vollständig im Browser spielbar und zeigt kreative Problemlösung, effiziente Entwicklungspraktiken und polierte Gameplay-Mechaniken.",
      "imageCaptions": {
        "gameplay": "Schnelle Gameplay-Mechaniken für den Jam entwickelt",
        "mechanics": "Einzigartige Spielmechaniken und Spielerinteraktionen",
        "development": "Unity-Entwicklungsprozess und Arbeitsablauf",
        "submission": "Finale Game-Jam-Einreichung und Präsentation"
      },
      "features": {
        "gameJamDevelopment": "Game-Jam-Entwicklung",
        "gameJamDevelopmentDesc": "Vollständiger Spielentwicklungszyklus komprimiert in einen Game-Jam-Zeitrahmen mit Fokus auf Kernmechaniken.",
        "rapidPrototyping": "Schnelles Prototyping",
        "rapidPrototypingDesc": "Schnelle Iteration und Testen von Spielkonzepten zur Validierung von Ideen und Verfeinerung von Gameplay-Mechaniken.",
        "creativeChallenges": "Kreative Problemlösung",
        "creativeChallengesDesc": "Innovative Lösungen für Designherausforderungen und kreative Interpretation von Game-Jam-Themen.",
        "timeConstraints": "Zeitmanagement",
        "timeConstraintsDesc": "Effizienter Entwicklungsworkflow und Priorisierung zur Lieferung eines vollständigen Spiels innerhalb der Jam-Beschränkungen."
      }
    },
    "spitting-sugar": {
      "title": "Spitting Sugar",
      "description": "Ein von Portal inspiriertes Ego-Rätselspiel, in dem du verschiedene Süßigkeiten spuckst, um Herausforderungen zu lösen.",
      "fullDescription": "Spitting Sugar ist ein innovatives Ego-Rätselspiel, das von Portals Mechaniken inspiriert ist. Spieler nutzen einzigartige Süßigkeiten-Spuck-Fähigkeiten, um Brücken zu bauen, Feinde zu besiegen und komplexe Rätsel zu lösen. Während eines Game Jams mit Unity entwickelt, zeigt dieses kreative Projekt erfinderische Gameplay-Mechaniken und cleveres Level-Design, das einfache Projektile in vielseitige Problemlösungswerkzeuge verwandelt. Leider ist der Quellcode mit der Zeit verloren gegangen.",
      "imageCaptions": {
        "gameplay": "Spitting Sugar Rätsellösung in Aktion",
        "mechanics": "Süße Projektilmechaniken und Interaktionen",
        "puzzles": "Kreatives Rätseldesign und Level-Layout",
        "development": "Game-Jam-Entwicklungsprozess und Iteration"
      },
      "features": {
        "sweetProjectiles": "Süße Projektile",
        "sweetProjectilesDesc": "Spucke verschiedene Arten von Süßigkeiten mit einzigartigen Eigenschaften und Effekten zur Umgebungsinteraktion.",
        "bridgeBuilding": "Brückenbau",
        "bridgeBuildingDesc": "Erstelle Wege und Strukturen mit süßen Projektilen, um neue Bereiche zu erreichen und Rätsel zu lösen.",
        "enemyCombat": "Gegnerkampf",
        "enemyCombatDesc": "Besiege Feinde mit strategischen süßigkeitenbasierten Angriffen und Umgebungsinteraktionen.",
        "portalInspiredPuzzles": "Portal-inspirierte Rätsel",
        "portalInspiredPuzzlesDesc": "Komplexe Umgebungsrätsel, die kreatives Denken und innovative Nutzung der Süßigkeitenmechaniken erfordern.",
        "gameJamCreativity": "Game-Jam-Innovation",
        "gameJamCreativityDesc": "Einzigartige Mechaniken und kreative Lösungen, die unter den Beschränkungen und der Kreativität eines Game Jams entwickelt wurden."
      }
    }
  }
}
