{
  "hero": {
    "name": "Simon Arapoglu",
    "title": "Software-Entwickler",
    "description": "Ich bin ein Backend-Entwickler und baue APIs, Emulatoren und interaktive Spielsysteme. Beruflich habe ich Java/Spring-Reporting-Lösungen entwickelt, relationale und NoSQL-Datenbanken verwaltet und CI/CD-Workflows implementiert. Ich erstelle auch Echtzeit-Gameplay-Systeme und Shader, die Sie direkt in Ihrem Browser erleben können."
  },
  "navigation": {
    "home": "Startseite",
    "projects": "Projekte",
    "games": "Spiele",
    "skills": "Fähigkeiten",
    "about": "Über mich",
    "contact": "Kontakt"
  },
  "projects": {
    "viewCode": "Code ansehen",
    "viewAll": "Alle Projekte ansehen",
    "title": "Ausgewählte Projekte",
    "allProjectsTitle": "Alle Projekte",
    "description": "Hier sind einige der Projekte, an denen ich gearbeitet habe",
    "viewProject": "Projekt ansehen",
    "technologies": "Technologien",
    "gallery": "Projektgalerie",
    "about": "Über dieses Projekt",
    "development": "Entwicklung",
    "developmentType": "Art",
    "soloDevelopment": "Einzelentwicklung",
    "teamDevelopment": "Teamentwicklung"
  },
  "games": {
    "viewCode": "Code ansehen",
    "viewAll": "Alle Spiele ansehen",
    "title": "Ausgewählte Spiele",
    "allGamesTitle": "Alle Spiele",
    "description": "Spiele, die ich in verschiedenen Engines entwickelt habe",
    "viewGame": "Spiel ansehen",
    "playGame": "Spiel spielen",
    "playableInBrowser": "Im Browser spielbar",
    "download": "Herunterladen",
    "engine": "Engine",
    "genre": "Genre",
    "technologies": "Technologien",
    "gallery": "Spielegalerie",
    "about": "Über dieses Spiel",
    "development": "Entwicklung",
    "developmentType": "Art",
    "soloDevelopment": "Einzelentwicklung",
    "teamDevelopment": "Teamentwicklung",
    "creditsInGame": "Credits sind im Spiel zu finden"
  },
  "skills": {
    "title": "Fähigkeiten & Technologien",
    "description": "Technologien, mit denen ich arbeite"
  },
  "about": {
    "title": "Über mich",
    "description": "Ich bin ein Backend-Entwickler und Systemprogrammierer mit einer Leidenschaft für die Entwicklung von APIs, Emulatoren bis hin zu interaktiven Spielerfahrungen. Bei anevis solutions habe ich umfassend mit Java und dem Spring-Framework gearbeitet, um Reporting-Plattformen zu entwickeln, PostgreSQL- und MongoDB-Datenbanken zu verwalten und CI/CD-Pipelines zu optimieren. Über die berufliche Arbeit hinaus entwerfe ich komplexe Backend-Systeme für Spiele, einschließlich benutzerdefinierter Rendering-Pipelines, Echtzeit-Shadern und Narrativ-Engines in Unity und WebGL. Meine persönlichen Projekte umfassen eine Vielzahl von Technologien, darunter C/C++, Zig, HLSL und systemnahe Programmierung, die sowohl meine Vielseitigkeit als auch meine technische Tiefe zeigen. Ich genieße es, leistungskritische Probleme anzugehen, mit neuen Technologien zu experimentieren und Erfahrungen zu schaffen, die technische Strenge mit ansprechender Interaktivität verbinden. Entdecken Sie meine Projekte und sehen Sie, wie meine Backend-Expertise Gameplay, Simulationen und interaktive Anwendungen direkt im Browser antreibt.",
    "sections": {
      "professional": {
        "title": "Beruflicher Hintergrund",
        "description": "Ich bin ein Backend-Entwickler und Systemprogrammierer mit einer Leidenschaft für die Entwicklung von APIs, Emulatoren bis hin zu interaktiven Spielerfahrungen."
      },
      "experience": {
        "title": "Berufserfahrung",
        "description": "Bei anevis solutions habe ich umfassend mit Java und dem Spring-Framework gearbeitet, um Reporting-Plattformen zu entwickeln, PostgreSQL- und MongoDB-Datenbanken zu verwalten und CI/CD-Pipelines zu optimieren."
      },
      "projects": {
        "title": "Persönliche Projekte",
        "description": "Über die berufliche Arbeit hinaus entwerfe ich komplexe Backend-Systeme für Spiele, einschließlich benutzerdefinierter Rendering-Pipelines, Echtzeit-Shadern und Narrativ-Engines in Unity und WebGL. Meine persönlichen Projekte umfassen eine Vielzahl von Technologien, darunter C/C++, Zig, HLSL und systemnahe Programmierung."
      },
      "philosophy": {
        "title": "Technische Philosophie",
        "description": "Ich genieße es, leistungskritische Probleme anzugehen, mit neuen Technologien zu experimentieren und Erfahrungen zu schaffen, die technische Strenge mit ansprechender Interaktivität verbinden. Entdecken Sie meine Projekte und sehen Sie, wie meine Backend-Expertise Gameplay, Simulationen und interaktive Anwendungen direkt im Browser antreibt."
      }
    }
  },
  "contact": {
    "resume": "Lebenslauf ansehen",
    "title": "Kontakt aufnehmen",
    "description": "Zögern Sie nicht, sich zu melden, wenn Sie zusammenarbeiten möchten oder einfach nur Hallo sagen wollen!",
    "email": "Kontakt aufnehmen",
    "github": "GitHub",
    "linkedin": "LinkedIn",
    "messageLinkedIn": "Nachricht auf LinkedIn senden"
  },
  "common": {
    "loading": "Lädt...",
    "error": "Ein Fehler ist aufgetreten",
    "notFound": "Seite nicht gefunden"
  },
  "projectFeatures": {
    "title": "Hauptfunktionen"
  },
  "projectsData": {
    "zilo": {
      "title": "Zilo Text Editor",
      "description": "Eine Neuimplementierung des kilo Text Editors, geschrieben in der Zig Programmiersprache.",
      "fullDescription": "Zilo ist ein Terminal-Texteditor. Er beinhaltet Syntaxhervorhebung und Suchfunktionalität, alles angetrieben von der Zig Programmiersprache.",
      "imageCaptions": {
        "welcome": "Zilo Texteditor Willkommensbildschirm",
        "syntax": "Syntaxhervorhebung implementiert für C und Zig Programmiersprachen",
        "search": "Suchfunktionalität in Aktion"
      },
      "features": {
        "syntaxHighlighting": "Syntaxhervorhebung",
        "syntaxHighlightingDesc": "Syntaxhervorhebung für C und Zig.",
        "searchReplace": "Suchfunktionalität",
        "searchReplaceDesc": "Mächtige Suchfunktionalität mit Groß-/Kleinschreibungsoptionen für effiziente Textnavigation.",
        "terminalIntegration": "Terminal-Integration",
        "terminalIntegrationDesc": "Nahtlose Integration in die Terminal-Umgebung für effizienten Arbeitsablauf.",
        "lightweightFast": "Leichtgewichtig & Schnell",
        "lightweightFastDesc": "Für Performance optimiert mit minimaler Ressourcennutzung und schnellen Startzeiten."
      }
    },
    "c8-serenityos": {
      "title": "CHIP-8 Emulator für SerenityOS",
      "description": "Eine CHIP-8 Emulator-Implementierung, die speziell für das SerenityOS-Betriebssystem entwickelt wurde.",
      "fullDescription": "Dieses Projekt ist ein vollständiger CHIP-8 Emulator, der für SerenityOS entwickelt wurde und präzise CPU-Emulation, Grafik-Rendering und Sound-Unterstützung bietet. CHIP-8 ist eine einfache virtuelle Maschine, die in den 1970er Jahren für die Programmierung von Spielen entworfen wurde, und dieser Emulator bringt diese klassischen Spiele mit pixelgenauer Genauigkeit auf die moderne SerenityOS-Plattform.",
      "imageCaptions": {
        "title": "ROM läuft und zeigt CHIP-8",
        "flightrunner": "FlightRunner Spiel läuft auf dem CHIP-8 Emulator",
        "tetris": "Tetris von Fran Dachille läuft auf dem Emulator",
        "particleDemo": "Partikel-Demo von zeroZshadow zeigt Grafik-Fähigkeiten"
      },
      "features": {
        "cpuEmulation": "Präzise CPU-Emulation",
        "cpuEmulationDesc": "Genaue Implementierung des CHIP-8 Befehlssatzes mit einstellbaren Timing-Kontrollen und ordnungsgemäßer Register-Behandlung.",
        "graphicsRendering": "Grafik-Rendering",
        "graphicsRenderingDesc": "Pixelgenaue 64x32 Monochrom-Display-Darstellung mit skalierbarer Auflösungsunterstützung für gestochen scharfe Bilder in jeder Größe.",
        "soundSystem": "Sound-System",
        "soundSystemDesc": "Authentische Piep-Ton-Generierung entsprechend den ursprünglichen CHIP-8 Spezifikationen.",
        "crossPlatformDev": "Plattformübergreifende Entwicklung",
        "crossPlatformDevDesc": "Speziell für SerenityOS entwickelt, zeigt Anpassungsfähigkeit an esoterische Betriebssysteme und vielfältige Entwicklungsumgebungen."
      }
    },
    "spring-library-api": {
      "title": "Spring Bibliotheksverwaltungs-API",
      "description": "Eine umfassende REST-API für Bibliotheksverwaltung, entwickelt mit Spring Boot und Java.",
      "fullDescription": "Dieses Projekt ist ein vollständiges Backend-System für Bibliotheksverwaltung, das mit Spring Boot entwickelt wurde. Es bietet REST-API-Endpunkte für die Verwaltung von Büchern, Autoren, Ausleihern und Leihvorgängen. Das System umfasst ordnungsgemäße Datenvalidierung, Ausnahmebehandlung und folgt REST-Prinzipien für sauberes API-Design. Perfekt zum Erlernen von Spring Boot-Konzepten oder als Grundlage für größere Bibliotheksverwaltungssysteme.",
      "imageCaptions": {
        "techStack": "Im Projekt verwendeter Technologie-Stack",
        "architecture": "Systemarchitektur-Diagramm mit Komponentenbeziehungen",
        "erDiagram": "Entity-Relationship-Diagramm des Datenbankschemas",
        "documentation": "API-Dokumentationsschnittstelle und Endpunkte"
      },
      "features": {
        "restfulApi": "RESTful API Design",
        "restfulApiDesc": "Saubere und intuitive REST-API nach Industriestandards mit ordnungsgemäßen HTTP-Methoden und Statuscodes.",
        "databaseIntegration": "Datenbank-Integration",
        "databaseIntegrationDesc": "Nahtlose Integration mit MongoDB unter Verwendung von JPA und Hibernate für effizientes Datenmanagement.",
        "crudOperations": "Vollständige CRUD-Operationen", 
        "crudOperationsDesc": "Vollständige Erstellen-, Lesen-, Aktualisieren-, Löschen-Funktionalität für Bücher, Autoren und Ausleihaufzeichnungen.",
        "apiDocumentation": "API-Dokumentation",
        "apiDocumentationDesc": "Umfassende API-Dokumentation."
      }
    },
    "socket-fun": {
      "title": "Socket-Experimente",
      "description": "Experimente mit Sockets in C unter Linux, mit Echo- und Chat-Servern mit gleichzeitiger Verbindungsbehandlung.",
      "fullDescription": "Socket-Experimente ist ein Lernprojekt, das Socket-Programmierung in C unter Linux erforscht. Es umfasst sowohl eine Echo-Server/Client- als auch eine Chat-Server/Client-Implementierung und demonstriert die gleichzeitige Verbindungsbehandlung mit epoll(). Das Projekt zeigt Low-Level-Netzwerkprogrammierungskonzepte und effiziente I/O-Multiplexing-Techniken für die Behandlung mehrerer Client-Verbindungen gleichzeitig.",
      "imageCaptions": {
        "title": "Socket-Experimente Projekttitel und Übersicht",
        "echoServer": "Echo-Server und Client-Kommunikations-Demonstration",
        "chatServer": "Chat-Server behandelt mehrere Clients gleichzeitig"
      },
      "features": {
        "echoServer": "Echo-Server",
        "echoServerDesc": "TCP Echo-Server, der Client-Nachrichten zurücksendet und grundlegende Client-Server-Kommunikationsmuster demonstriert.",
        "chatServer": "Chat-Server",
        "chatServerDesc": "Multi-Client-Chat-Server ermöglicht Echtzeitkommunikation zwischen verbundenen Clients.",
        "concurrentConnections": "Gleichzeitige Verbindungen", 
        "concurrentConnectionsDesc": "Unterstützung für bis zu 128 gleichzeitige Client-Verbindungen mit effizientem I/O-Multiplexing.",
        "epollHandling": "epoll() Implementierung",
        "epollHandlingDesc": "Hochleistungs-ereignisgesteuertes I/O unter Verwendung von Linux epoll() für skalierbare Netzwerkanwendungen."
      }
    },
    "world-launcher": {
      "title": "World-Launcher",
      "description": "Ein Windows-Launcher für Super Mario World ROM-Hacks mit integrierten Patching-Funktionen mit Floating IPS.",
      "fullDescription": "World-Launcher ist eine umfassende Windows-Anwendung für Super Mario World ROM-Hack-Enthusiasten. Sie kombiniert ROM-Patching-Funktionalität mit einer benutzerfreundlichen Launcher-Oberfläche, die es Benutzern ermöglicht, ROM-Dateien einfach mit .bps- oder .ips-Patches zu patchen und sie direkt in ihrem bevorzugten SNES-Emulator zu starten. Die Anwendung integriert Floating IPS von Alcaro für zuverlässiges ROM-Patching und bietet nahtlose Emulator-Integration für ein verbessertes Spielerlebnis.",
      "imageCaptions": {
        "title": "World-Launcher Anwendungstitel und Logo",
        "mainMenu": "Hauptmenü-Oberfläche von World-Launcher",
        "patchingAndLaunching": "ROM-Patching-Prozess und Spiel-Start-Demonstration"
      },
      "features": {
        "romPatching": "ROM-Patching",
        "romPatchingDesc": "Integrierter Floating IPS-Patcher unterstützt .bps- und .ips-Patch-Formate für zuverlässige ROM-Modifikationen.",
        "gameLauncher": "Spiele-Launcher",
        "gameLauncherDesc": "Benutzerfreundliche Launcher-Oberfläche zum Organisieren und Starten von ROM-Hacks direkt aus der Anwendung.",
        "emulatorIntegration": "Emulator-Integration",
        "emulatorIntegrationDesc": "Nahtlose Integration mit SNES-Emulatoren wie Snes9x, mit Vollbild-Start-Optionen.",
        "userFriendlyInterface": "Benutzerfreundliche Oberfläche",
        "userFriendlyInterfaceDesc": "Intuitive Windows Forms-Oberfläche macht ROM-Hack-Verwaltung für alle Benutzer zugänglich."
      }
    }
  },
  "gamesData": {
    "shooty": {
      "title": "Shooty",
      "description": "Ein schnelles Arcade-Shooter-Spiel, das in Zig mit Raylib geschrieben wurde.",
      "fullDescription": "Shooty ist ein schnelles Arcade-Shooter-Spiel, das mit Zig und Raylib entwickelt wurde. Die Spieler steuern ein Raumschiff und kämpfen gegen Wellen von Feinden in intensiven Arcade-Kämpfen. Mit flüssigen Sprite-Animationen, präziser Kollisionserkennung und fesselnden Gameplay-Mechaniken.",
      "imageCaptions": {
        "title": "Shooty Spiel-Titelbildschirm",
        "mainMenu": "Hauptmenü-Oberfläche",
        "tutorial": "Tutorial-Bildschirm mit Erklärung der Spielmechaniken",
        "bombItem": "Bomben-Item Power-Up im Spiel"
      },
      "features": {
        "spriteAnimation": "Sprite-Animation",
        "spriteAnimationDesc": "Selbst entwickeltes Animationssystem mit fließenden und flüssigen Sprite-Animationen für Charaktere, Projektile und visuelle Effekte.",
        "collisionDetection": "Kollisionserkennung",
        "collisionDetectionDesc": "Präzises Kollisionserkennungssystem für genaue Treffererkennung und Gameplay-Interaktionen.",
        "scoreSystem": "Punktesystem",
        "scoreSystemDesc": "Dynamisches Punktesystem mit Kombinations-Multiplikatoren und Bonuspunkten für geschicktes Spiel.",
        "soundEffects": "Soundeffekte",
        "soundEffectsDesc": "Immersives Audio-Feedback mit Schussgeräuschen, Explosionen und Hintergrundmusik."
      }
    },
    "pirate-game-jam-2025": {
      "title": "Living Armory",
      "description": "Ein Unity WebGL-Spiel, das für den Pirate Software Game Jam 2025 entwickelt wurde und direkt im Browser spielbar ist.",
      "fullDescription": "Living Armory versetzt Sie in die Kontrolle über Waffen selbst, während Sie durch einen mysteriösen Dungeon navigieren. Basierend auf dem Game-Jam-Thema 'Du bist die Waffe' besitzen und kontrollieren Sie verschiedene Waffen, um Feinde zu bekämpfen und mit der Umgebung zu interagieren. Als Metroidbrainia-Spiel ist Ihre Fortschrittsgeschwindigkeit durch Ihr Wissen über die Spielwelt begrenzt - können Sie den schnellsten Weg aus dem Dungeon finden? Erstellt für den Pirate Software Game Jam 2025, fordert diese Unity WebGL-Erfahrung Spieler heraus, sowohl Kampf als auch Rätsellösung durch Waffenbesitz zu meistern.",
      "imageCaptions": {
        "name": "Living Armory Spieltitel und Name",
        "introAnimation": "Spiel-Intro-Animations-Screenshot",
        "beTheWeapon": "Sei die Waffe Gameplay-Mechanik in Aktion",
        "fastestRoute": "Den schnellsten Weg durch herausfordernde Level finden",
        "fightBoss": "Intensive Boss-Kampf-Gameplay-Sequenz"
      },
      "features": {
        "gameJamDevelopment": "Waffenbesitz-Mechaniken",
        "gameJamDevelopmentDesc": "Übernehmen Sie die Kontrolle über verschiedene Waffen, um Feinde zu bekämpfen und mit der Umgebung zu interagieren, verkörpern Sie das Thema 'Du bist die Waffe'.",
        "rapidPrototyping": "Metroidbrainia-Fortschritt",
        "rapidPrototypingDesc": "Die Fortschrittsgeschwindigkeit ist durch Ihr Wissen über die Spielwelt begrenzt - entdecken Sie Abkürzungen und optimale Pfade durch den Dungeon.",
        "creativeChallenges": "Flucht-Herausforderung",
        "creativeChallengesDesc": "Navigieren Sie durch die Geheimnisse des Dungeons und finden Sie den schnellsten Weg zur Freiheit durch strategischen Waffeneinsatz und Umgebungsbeherrschung.",
        "timeConstraints": "Speedrun-Potenzial",
        "timeConstraintsDesc": "Meistern Sie die Waffenmechaniken und das Dungeon-Layout, um schnellere Abschlusszeiten zu erreichen und optimale Strategien zu entdecken."
      }
    },
    "spitting-sugar": {
      "title": "Spitting Sugar",
      "description": "Ein von Portal inspiriertes Ego-Rätselspiel, in dem du verschiedene Süßigkeiten spuckst, um Herausforderungen zu lösen.",
      "fullDescription": "Spitting Sugar ist ein innovatives Ego-Rätselspiel, das von Portals Mechaniken inspiriert ist. Spieler nutzen einzigartige Süßigkeiten-Spuck-Fähigkeiten, um Brücken zu bauen, Feinde zu besiegen und komplexe Rätsel zu lösen. Während eines Game Jams mit Unity entwickelt, zeigt dieses kreative Projekt erfinderische Gameplay-Mechaniken und cleveres Level-Design, das einfache Projektile in vielseitige Problemlösungswerkzeuge verwandelt. Leider ist der Quellcode mit der Zeit verloren gegangen.",
      "imageCaptions": {
        "title": "Spitting Sugar Spiel-Titelbildschirm",
        "startArea": "Startbereich",
        "bouncyBears": "Springender Bär Power-Up lässt dich neue Höhen erreichen",
        "buildBridges": "Brücken bauen mit Zucker-Projektilen zum Überqueren von Lücken",
        "solvePuzzles": "Komplexe Rätsel lösen mit insgesamt vier süßen Mechaniken"
      },
      "features": {
        "sweetProjectiles": "Süße Projektile",
        "sweetProjectilesDesc": "Spucke verschiedene Arten von Süßigkeiten mit einzigartigen Eigenschaften und Effekten zur Umgebungsinteraktion.",
        "bridgeBuilding": "Brückenbau",
        "bridgeBuildingDesc": "Erstelle Wege und Strukturen mit süßen Projektilen, um neue Bereiche zu erreichen und Rätsel zu lösen.",
        "enemyCombat": "Gegnerkampf",
        "enemyCombatDesc": "Besiege Feinde mit strategischen süßigkeitenbasierten Angriffen und Umgebungsinteraktionen.",
        "portalInspiredPuzzles": "Portal-inspirierte Rätsel",
        "portalInspiredPuzzlesDesc": "Komplexe Umgebungsrätsel, die kreatives Denken und innovative Nutzung der Süßigkeitenmechaniken erfordern.",
        "gameJamCreativity": "Game-Jam-Innovation",
        "gameJamCreativityDesc": "Einzigartige Mechaniken und kreative Lösungen, die unter den Beschränkungen und der Kreativität eines Game Jams entwickelt wurden."
      }
    },
    "bachelor-thesis": {
      "title": "Rendering klassischer handgezeichneter Zeichentrickanimationen",
      "description": "Meine Bachelorarbeit: Eine technische Erforschung der 3D-Nachbildung klassischer 2D-Animationen mit benutzerdefinierten Unity-Shadern und Render-Pipeline.",
      "fullDescription": "Dieses Bachelorarbeitsprojekt erforscht die technischen Herausforderungen und künstlerischen Möglichkeiten bei der Nachbildung klassischer handgezeichneter Zeichentrickanimationen in einer 3D-Umgebung. Unter Verwendung von Unitys programmierbarer Render-Pipeline und benutzerdefinierten HLSL-Shadern demonstriert das Projekt innovative Ansätze zur Beibehaltung des charakteristischen visuellen Stils traditioneller 2D-Animation bei gleichzeitiger Nutzung der Vorteile des 3D-Renderings. Die Arbeit umfasst detaillierte Analysen von Animationsprinzipien, Shader-Entwicklung und Render-Pipeline-Anpassung, um authentische Cartoon-Ästhetik im dreidimensionalen Raum zu erreichen.",
      "imageCaptions": {
        "title": "Projekttitel und Übersicht",
        "disneyRecreation": "3D-Nachbildung des klassischen Disney-Animationsstils mit benutzerdefinierten Shadern",
        "gertieRecreation": "Gertie der Dinosaurier in 3D neu interpretiert unter Beibehaltung des ursprünglichen handgezeichneten Charmes",
        "mononokeRecreation": "Prinzessin Mononoke-Umgebung mit benutzerdefinierten Cartoon-Shadern gerendert",
        "thesisPdf": "Vollständiges Bachelorarbeitsdokument mit technischen Details und Forschungsergebnissen"
      },
      "features": {
        "customShaders": "Benutzerdefinierte HLSL-Shader",
        "customShadersDesc": "Handgefertigte Shader, die darauf ausgelegt sind, die einzigartigen visuellen Eigenschaften traditioneller handgezeichneter Animation zu replizieren.",
        "renderPipeline": "Benutzerdefinierte Render-Pipeline",
        "renderPipelineDesc": "Modifizierte Unity-Render-Pipeline, optimiert für Cartoon-Stil-Rendering mit spezialisierten Beleuchtungs- und Schattierungstechniken.",
        "animationRecreation": "Klassische Animations-Nachbildung",
        "animationRecreationDesc": "Originalgetreue 3D-Nachbildungen ikonischer Cartoon-Charaktere und -Szenen unter Beibehaltung ihrer ursprünglichen künstlerischen Absicht.",
        "technicalResearch": "Technische Forschung",
        "technicalResearchDesc": "Umfassende Analyse von Animationsprinzipien, Rendering-Techniken und der Schnittstelle zwischen 2D- und 3D-Grafiken."
      }
    },
    "kalos": {
      "title": "KALOS",
      "description": "Ein interaktives Narrativ-Spiel, das für das Universitätsmodul 'Interactive Stories and Playable Narratives' entwickelt wurde.",
      "fullDescription": "KALOS erzählt die fesselnde Geschichte der jungen Nuria, die von dem Gott des Tempels, den ihre Familie bewacht, auf eine göttliche Mission geschickt wird. Doch während sich die Erzählung entfaltet, ist nicht alles so, wie es scheint. Diese interaktive Geschichte wurde als Teil des Universitätsmoduls 'Interactive Stories and Playable Narratives' entwickelt und zeigt fortgeschrittenes Narrativ-Design, Sprachausgabe und mehrere verzweigte Handlungsstränge, die auf Spielerentscheidungen reagieren.",
      "imageCaptions": {
        "title": "KALOS Spiel-Titelbildschirm mit atmosphärischem Design",
        "cutscene": "Sprachausgabe-animierte Zwischensequenz mit einzigartigem Kunststil",
        "environment": "Atmosphärische Low-Poly-Umgebung mit detaillierter Beleuchtung",
        "minigame": "Schlösser-knacken-Minispiel mit Geschicklichkeit und Timing",
        "rhythmGame": "Gebet-Rhythmus-Spiel für göttliche Kommunikation"
      },
      "features": {
        "voiceActedCutscenes": "Sprachausgabe-Zwischensequenzen",
        "voiceActedCutscenesDesc": "Vollständig sprachausgabeanimierte Zwischensequenzen mit einem einzigartigen Kunststil, der Charaktere und Geschichte zum Leben erweckt.",
        "multiplePaths": "Mehrere Handlungspfade",
        "multiplePathsDesc": "Mehrere verzweigte Pfade, die zu verschiedenen Enden führen, basierend auf Spielerentscheidungen und Interaktionen.",
        "inkScripting": "Ink-Narrativ-Scripting",
        "inkScriptingDesc": "Implementierte Unterstützung für die Ink-Narrativ-Scripting-Sprache, die es Nicht-Programmierern ermöglicht, Szenen einfach zu erstellen und zu modifizieren.",
        "lowPolyEnvironments": "Atmosphärische Umgebungen",
        "lowPolyEnvironmentsDesc": "Wunderschöne Low-Poly-Umgebungen mit atmosphärischen Soundeffekten, die das immersive Storytelling-Erlebnis verstärken.",
        "miniGames": "Interaktive Minispiele",
        "miniGamesDesc": "Fesselnde Minispiele einschließlich Schlösser-knacken-Mechaniken und rhythmusbasierte Gebetssequenzen, die sich nahtlos in die Erzählung integrieren."
      }
    }
  }
}
