{
  "hero": {
    "name": "Simon Arapoglu",
    "title": "Software Developer",
    "description": "I'm a backend developer building APIs, emulators, and interactive game systems. Professionally, I've developed Java/Spring reporting solutions, managed relational and NoSQL databases, and implemented CI/CD workflows. I also create real-time gameplay systems and shaders that you can experience directly in your browser."
  },
  "navigation": {
    "home": "Home",
    "projects": "Projects",
    "games": "Games",
    "skills": "Skills",
    "about": "About",
    "contact": "Contact"
  },
  "projects": {
    "viewCode": "View Code",
    "viewAll": "View All Projects",
    "title": "Featured Projects",
    "allProjectsTitle": "All Projects",
    "description": "Here are some of the projects I've worked on",
    "viewProject": "View Project",
    "technologies": "Technologies",
    "gallery": "Project Gallery",
    "about": "About This Project"
  },
  "games": {
    "viewCode": "View Code",
    "viewAll": "View All Games",
    "title": "Featured Games",
    "allGamesTitle": "All Games",
    "description": "Games I've developed in different engines",
    "viewGame": "View Game",
    "playGame": "Play Game",
    "playableInBrowser": "Playable in browser",
    "downloadOnItch": "Download on itch",
    "engine": "Engine",
    "genre": "Genre",
    "technologies": "Technologies",
    "gallery": "Game Gallery",
    "about": "About This Game"
  },
  "skills": {
    "title": "Skills & Technologies",
    "description": "Technologies I work with"
  },
  "about": {
    "title": "About Me",
    "description": "I'm a backend developer and systems programmer with a passion for building everything from APIs and emulators to interactive game experiences. At anevis solutions, I worked extensively with Java and the Spring framework to develop reporting platforms, maintain PostgreSQL and MongoDB databases, and optimize CI/CD pipelines. Beyond professional work, I design complex backend systems for games, including custom rendering pipelines, real-time shaders, and narrative engines in Unity and WebGL. My personal projects span a variety of technologies, including C/C++, Zig, HLSL, and low-level system programming, showcasing both my versatility and technical depth. I enjoy tackling performance-critical problems, experimenting with new technologies, and creating experiences that blend technical rigor with engaging interactivity. Explore my projects to see how my backend expertise powers gameplay, simulations, and interactive applications directly in the browser.",
    "sections": {
      "professional": {
        "title": "Professional Background",
        "description": "I'm a backend developer and systems programmer with a passion for building everything from APIs and emulators to interactive game experiences."
      },
      "experience": {
        "title": "Industry Experience",
        "description": "At anevis solutions, I worked extensively with Java and the Spring framework to develop reporting platforms, maintain PostgreSQL and MongoDB databases, and optimize CI/CD pipelines."
      },
      "projects": {
        "title": "Personal Projects",
        "description": "Beyond professional work, I design complex backend systems for games, including custom rendering pipelines, real-time shaders, and narrative engines in Unity and WebGL. My personal projects span a variety of technologies, including C/C++, Zig, HLSL, and low-level system programming."
      },
      "philosophy": {
        "title": "Technical Philosophy",
        "description": "I enjoy tackling performance-critical problems, experimenting with new technologies, and creating experiences that blend technical rigor with engaging interactivity. Explore my projects to see how my backend expertise powers gameplay, simulations, and interactive applications directly in the browser."
      }
    }
  },
  "contact": {
    "resume": "View Resume",
    "title": "Get In Touch",
    "description": "Feel free to reach out if you'd like to collaborate or just want to say hello!",
    "email": "Get in Touch",
    "github": "GitHub",
    "linkedin": "LinkedIn"
  },
  "common": {
    "loading": "Loading...",
    "error": "An error occurred",
    "notFound": "Page not found"
  },
  "projectFeatures": {
    "title": "Key Features"
  },
  "projectsData": {
    "zilo": {
      "title": "Zilo Text Editor",
      "description": "A reimplementation of the kilo Text Editor, written in the Zig Programming language.",
      "fullDescription": "Zilo is a terminal text editor. It includes syntax highlighting and search functionality, all powered by the Zig programming language.",
      "imageCaptions": {
        "welcome": "Zilo text editor welcome screen",
        "syntax": "Syntax highlighting implemented for C and Zig programming languages",
        "search": "Search functionality in action"
      },
      "features": {
        "syntaxHighlighting": "Syntax Highlighting",
        "syntaxHighlightingDesc": "Syntax highlighting for C and Zig.",
        "searchReplace": "Search & Replace",
        "searchReplaceDesc": "Powerful search and replace functionality with regex support and case-sensitive options.",
        "terminalIntegration": "Terminal Integration",
        "terminalIntegrationDesc": "Seamless integration with terminal environment for efficient workflow.",
        "lightweightFast": "Lightweight & Fast",
        "lightweightFastDesc": "Optimized for performance with minimal resource usage and fast startup times."
      }
    },
    "c8-serenityos": {
      "title": "CHIP-8 Emulator for SerenityOS",
      "description": "A CHIP-8 emulator implementation built specifically for the SerenityOS operating system.",
      "fullDescription": "This project is a complete CHIP-8 emulator developed for SerenityOS, featuring accurate CPU emulation, graphics rendering, and sound support. CHIP-8 is a simple virtual machine designed in the 1970s for programming games, and this emulator brings those classic games to the modern SerenityOS platform with pixel-perfect accuracy.",
      "imageCaptions": {
        "title": "Running a ROM displaying CHIP-8",
        "flightrunner": "FlightRunner game running on the CHIP-8 emulator",
        "tetris": "Tetris by Fran Dachille running on the emulator",
        "particleDemo": "Particle demo by zeroZshadow showcasing graphics capabilities"
      },
      "features": {
        "cpuEmulation": "Accurate CPU Emulation",
        "cpuEmulationDesc": "Precise implementation of the CHIP-8 instruction set with cycle-accurate timing and proper register handling.",
        "graphicsRendering": "Graphics Rendering",
        "graphicsRenderingDesc": "Pixel-perfect 64x32 monochrome display rendering with proper sprite collision detection.",
        "soundSystem": "Sound System",
        "soundSystemDesc": "Authentic beep sound generation matching the original CHIP-8 specifications.",
        "debuggerTools": "Debugging Tools",
        "debuggerToolsDesc": "Built-in debugger with disassembly view, register inspection, and step-by-step execution."
      }
    },
    "spring-library-api": {
      "title": "Spring Library Management API",
      "description": "A comprehensive REST API for library management built with Spring Boot and Java.",
      "fullDescription": "This project is a full-featured library management system backend built with Spring Boot. It provides REST API endpoints for managing books, authors, borrowers, and lending operations. The system includes proper data validation, exception handling, and follows REST principles for clean API design. Perfect for learning Spring Boot concepts or as a foundation for larger library management systems.",
      "imageCaptions": {
        "techStack": "Technology stack used in the project",
        "architecture": "System architecture diagram showing component relationships",
        "erDiagram": "Entity relationship diagram of the database schema",
        "documentation": "API documentation interface and endpoints"
      },
      "features": {
        "restfulApi": "RESTful API Design",
        "restfulApiDesc": "Clean and intuitive REST API following industry standards with proper HTTP methods and status codes.",
        "databaseIntegration": "Database Integration",
        "databaseIntegrationDesc": "Seamless integration with MongoDB using JPA and Hibernate for efficient data management.",
        "crudOperations": "Complete CRUD Operations",
        "crudOperationsDesc": "Full Create, Read, Update, Delete functionality for books, authors, and borrowing records.",
        "apiDocumentation": "API Documentation",
        "apiDocumentationDesc": "Comprehensive API documentation."
      }
    },
    "socket-fun": {
      "title": "Socket Experiments",
      "description": "Experimenting with sockets in C on Linux, featuring echo and chat servers with concurrent connection handling.",
      "fullDescription": "Socket Experiments is a learning project that explores socket programming in C on Linux. It includes both an Echo Server/Client and Chat Server/Client implementation, demonstrating concurrent connection handling using epoll(). The project showcases low-level network programming concepts and efficient I/O multiplexing techniques for handling multiple client connections simultaneously.",
      "imageCaptions": {
        "title": "Socket Experiments project title and overview",
        "echoServer": "Echo server and client communication demonstration",
        "chatServer": "Chat server handling multiple clients simultaneously"
      },
      "features": {
        "echoServer": "Echo Server",
        "echoServerDesc": "TCP Echo Server that reflects client messages back, demonstrating basic client-server communication patterns.",
        "chatServer": "Chat Server", 
        "chatServerDesc": "Multi-client chat server enabling real-time communication between connected clients.",
        "concurrentConnections": "Concurrent Connections",
        "concurrentConnectionsDesc": "Support for up to 128 simultaneous client connections using efficient I/O multiplexing.",
        "epollHandling": "epoll() Implementation",
        "epollHandlingDesc": "High-performance event-driven I/O using Linux epoll() for scalable network applications."
      }
    },
    "world-launcher": {
      "title": "World-Launcher",
      "description": "A Windows launcher for Super Mario World ROM hacks with integrated patching capabilities using Floating IPS.",
      "fullDescription": "World-Launcher is a comprehensive Windows application designed for Super Mario World ROM hack enthusiasts. It combines ROM patching functionality with a user-friendly launcher interface, allowing users to easily patch ROM files with .bps or .ips patches and launch them directly in their preferred SNES emulator. The application integrates Floating IPS by Alcaro for reliable ROM patching and provides seamless emulator integration for an enhanced gaming experience.",
      "imageCaptions": {
        "title": "World-Launcher application title and logo",
        "mainMenu": "Main menu interface of World-Launcher",
        "patchingAndLaunching": "ROM patching process and game launching demonstration"
      },
      "features": {
        "romPatching": "ROM Patching",
        "romPatchingDesc": "Integrated Floating IPS patcher supporting .bps and .ips patch formats for reliable ROM modifications.",
        "gameLauncher": "Game Launcher",
        "gameLauncherDesc": "Easy-to-use launcher interface for organizing and starting ROM hacks directly from the application.",
        "emulatorIntegration": "Emulator Integration",
        "emulatorIntegrationDesc": "Seamless integration with SNES emulators like Snes9x, with fullscreen launch options.",
        "userFriendlyInterface": "User-Friendly Interface",
        "userFriendlyInterfaceDesc": "Intuitive Windows Forms interface making ROM hack management accessible to all users."
      }
    }
  },
  "gamesData": {
    "shooty": {
      "title": "Shooty",
      "description": "A fast-paced arcade shooter game written in Zig using Raylib.",
      "fullDescription": "Shooty is a fast-paced arcade shooter game built with Zig and Raylib. Players control a spaceship, battling against waves of enemies in intense arcade-style combat. Features smooth sprite animations, precise collision detection, and engaging gameplay mechanics.",
      "imageCaptions": {
        "title": "Shooty game title screen",
        "mainMenu": "Main menu interface",
        "tutorial": "Tutorial screen explaining game mechanics",
        "bombItem": "Bomb item power-up in the game"
      },
      "features": {
        "spriteAnimation": "Sprite Animation",
        "spriteAnimationDesc": "Smooth and fluid sprite animations for characters, projectiles, and visual effects.",
        "collisionDetection": "Collision Detection",
        "collisionDetectionDesc": "Precise collision detection system for accurate hit detection and gameplay interactions.",
        "scoreSystem": "Scoring System",
        "scoreSystemDesc": "Dynamic scoring system with combo multipliers and bonus points for skilled play.",
        "soundEffects": "Sound Effects",
        "soundEffectsDesc": "Immersive audio feedback with shooting sounds, explosions, and ambient music."
      }
    },
    "pirate-game-jam-2025": {
      "title": "Living Armory",
      "description": "A Unity WebGL game developed for the Pirate Software Game Jam 2025, playable directly in your browser.",
      "fullDescription": "Living Armory is an exciting game jam entry created for the Pirate Software Game Jam 2025. This Unity WebGL project demonstrates the ability to rapidly prototype and develop a complete game concept within the constraints of a game jam timeline. The game is fully playable in your browser and showcases creative problem-solving, efficient development practices, and polished gameplay mechanics.",
      "imageCaptions": {
        "name": "Living Armory game title and name",
        "introAnimation": "Game intro animation screenshot",
        "beTheWeapon": "Be the weapon gameplay mechanic in action",
        "fastestRoute": "Finding the fastest route through challenging levels",
        "fightBoss": "Intense boss fight gameplay sequence"
      },
      "features": {
        "gameJamDevelopment": "Game Jam Development",
        "gameJamDevelopmentDesc": "Complete game development cycle compressed into a game jam timeframe with focus on core mechanics.",
        "rapidPrototyping": "Rapid Prototyping",
        "rapidPrototypingDesc": "Quick iteration and testing of game concepts to validate ideas and refine gameplay mechanics.",
        "creativeChallenges": "Creative Problem Solving",
        "creativeChallengesDesc": "Innovative solutions to design challenges and creative interpretation of game jam themes.",
        "timeConstraints": "Time Management",
        "timeConstraintsDesc": "Efficient development workflow and prioritization to deliver a complete game within jam constraints."
      }
    },
    "spitting-sugar": {
      "title": "Spitting Sugar",
      "description": "A Portal-inspired first person puzzle game where you spit different sweets to solve challenges.",
      "fullDescription": "Spitting Sugar is an innovative first-person puzzle game inspired by Portal's mechanics. Players use unique sweet-spitting abilities to build bridges, defeat enemies, and solve complex puzzles. Developed during a game jam using Unity, this creative project showcases inventive gameplay mechanics and clever level design that transforms simple projectiles into versatile problem-solving tools. Sadly, the source code has been lost to time.",
      "imageCaptions": {
        "title": "Spitting Sugar game title screen",
        "startArea": "Starting area",
        "bouncyBears": "Bouncing Bear Power Up lets you reach new heights",
        "buildBridges": "Building bridges with sugar projectiles to cross gaps",
        "solvePuzzles": "Solving complex puzzles using a total of four sweet mechanics"
      },
      "features": {
        "sweetProjectiles": "Sweet Projectiles",
        "sweetProjectilesDesc": "Spit different types of candy with unique properties and effects to interact with the environment.",
        "bridgeBuilding": "Bridge Building",
        "bridgeBuildingDesc": "Create pathways and structures using sweet projectiles to reach new areas and solve puzzles.",
        "enemyCombat": "Enemy Combat",
        "enemyCombatDesc": "Defeat enemies using strategic sweet-based attacks and environmental interactions.",
        "portalInspiredPuzzles": "Portal-Inspired Puzzles",
        "portalInspiredPuzzlesDesc": "Complex environmental puzzles requiring creative thinking and innovative use of sweet mechanics.",
        "gameJamCreativity": "Game Jam Innovation",
        "gameJamCreativityDesc": "Unique mechanics and creative solutions developed under the constraints and creativity of a game jam."
      }
    },
    "bachelor-thesis": {
      "title": "Rendering classic hand-drawn cartoon animations",
      "description": "My Bachelor's thesis: A technical exploration of 3D recreation of classic 2D animations using custom Unity shaders and render pipeline.",
      "fullDescription": "This Bachelor's thesis project explores the technical challenges and artistic possibilities of recreating classic hand-drawn cartoon animations in a 3D environment. Using Unity's programmable render pipeline and custom HLSL shaders, the project demonstrates innovative approaches to maintaining the distinctive visual style of traditional 2D animation while leveraging the advantages of 3D rendering. The work includes detailed analysis of animation principles, shader development, and render pipeline customization to achieve authentic cartoon aesthetics in three-dimensional space.",
      "imageCaptions": {
        "title": "Project title and overview",
        "disneyRecreation": "3D recreation of classic Disney animation style with custom shaders",
        "gertieRecreation": "Gertie the Dinosaur reimagined in 3D while preserving original hand-drawn charm",
        "mononokeRecreation": "Princess Mononoke environment rendered with custom cartoon shaders",
        "thesisPdf": "Complete Bachelor's thesis document with technical details and research findings"
      },
      "features": {
        "customShaders": "Custom HLSL Shaders",
        "customShadersDesc": "Hand-crafted shaders designed to replicate the unique visual characteristics of traditional hand-drawn animation.",
        "renderPipeline": "Custom Render Pipeline",
        "renderPipelineDesc": "Modified Unity render pipeline optimized for cartoon-style rendering with specialized lighting and shading techniques.",
        "animationRecreation": "Classic Animation Recreation",
        "animationRecreationDesc": "Faithful 3D recreations of iconic cartoon characters and scenes while preserving their original artistic intent.",
        "technicalResearch": "Technical Research",
        "technicalResearchDesc": "Comprehensive analysis of animation principles, rendering techniques, and the intersection of 2D and 3D graphics."
      }
    },
    "kalos": {
      "title": "KALOS",
      "description": "An interactive narrative game created for the 'Interactive Stories and Playable Narratives' university module.",
      "fullDescription": "KALOS tells the compelling story of young Nuria, who is sent on a divine mission by the god of the temple her family guards. But as the narrative unfolds, not everything is as it seems. This interactive story was developed as part of the university module 'Interactive Stories and Playable Narratives', showcasing advanced narrative design, voice acting, and multiple branching storylines that respond to player choices.",
      "imageCaptions": {
        "title": "KALOS game title screen with atmospheric design",
        "cutscene": "Voice acted animated cutscene showcasing the unique art style",
        "environment": "Atmospheric low poly environment with detailed lighting",
        "minigame": "Lock picking minigame requiring skill and timing",
        "rhythmGame": "Prayer rhythm game for divine communication"
      },
      "features": {
        "voiceActedCutscenes": "Voice Acted Cutscenes",
        "voiceActedCutscenesDesc": "Fully voice acted animated cutscenes with a unique art style that brings characters and story to life.",
        "multiplePaths": "Multiple Story Paths",
        "multiplePathsDesc": "Multiple branching paths leading to different endings based on player choices and interactions.",
        "inkScripting": "Ink Narrative Scripting",
        "inkScriptingDesc": "Implemented support for Ink narrative scripting language, allowing non-programmers to create and modify scenes easily.",
        "lowPolyEnvironments": "Atmospheric Environments",
        "lowPolyEnvironmentsDesc": "Beautiful low poly environments with atmospheric sound effects that enhance the immersive storytelling experience.",
        "miniGames": "Interactive Minigames",
        "miniGamesDesc": "Engaging minigames including lock picking mechanics and rhythm-based prayer sequences that integrate seamlessly with the narrative."
      }
    }
  }
}
