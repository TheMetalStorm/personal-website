{
  "hero": {
    "name": "Simon Arapoglu",
    "title": "Software Developer",
    "description": "I develop software and video games. I like to experiment with new technologies and try different approaches to find the best possible solution. Take a look around and play some games directly in your browser!"
  },
  "navigation": {
    "home": "Home",
    "projects": "Projects",
    "games": "Games",
    "skills": "Skills",
    "contact": "Contact"
  },
  "projects": {
    "viewCode": "View Code",
    "viewAll": "View All Projects",
    "title": "Projects",
    "description": "Here are some of the projects I've worked on",
    "viewProject": "View Project",
    "technologies": "Technologies",
    "gallery": "Project Gallery",
    "about": "About This Project"
  },
  "games": {
    "viewCode": "View Code",
    "viewAll": "View All Games",
    "title": "Games",
    "description": "Games I've developed in different engines",
    "viewGame": "View Game",
    "playGame": "Play Game",
    "playableInBrowser": "Playable in browser",
    "downloadOnItch": "Download on itch",
    "engine": "Engine",
    "genre": "Genre",
    "technologies": "Technologies",
    "gallery": "Game Gallery",
    "about": "About This Game"
  },
  "skills": {
    "title": "Skills & Technologies",
    "description": "Technologies I work with"
  },
  "contact": {
    "resume": "View Resume",
    "title": "Get In Touch",
    "description": "Feel free to reach out if you'd like to collaborate or just want to say hello!",
    "email": "Get in Touch",
    "github": "GitHub",
    "linkedin": "LinkedIn"
  },
  "common": {
    "loading": "Loading...",
    "error": "An error occurred",
    "notFound": "Page not found"
  },
  "projectFeatures": {
    "title": "Key Features"
  },
  "projectsData": {
    "zilo": {
      "title": "Zilo Text Editor",
      "description": "A reimplementation of the kilo Text Editor, written in the Zig Programming language.",
      "fullDescription": "Zilo is a terminal text editor. It includes syntax highlighting and search functionality, all powered by the Zig programming language.",
      "imagesCaptions": {
        "main": "Main editor interface with syntax highlighting",
        "search": "Built-in search and replace functionality",
        "terminal": "Seamless terminal integration"
      },
      "features": {
        "syntaxHighlighting": "Syntax Highlighting",
        "syntaxHighlightingDesc": "Syntax highlighting for C and Zig.",
        "searchReplace": "Search & Replace",
        "searchReplaceDesc": "Powerful search and replace functionality with regex support and case-sensitive options.",
        "terminalIntegration": "Terminal Integration",
        "terminalIntegrationDesc": "Seamless integration with terminal environment for efficient workflow.",
        "lightweightFast": "Lightweight & Fast",
        "lightweightFastDesc": "Optimized for performance with minimal resource usage and fast startup times."
      }
    },
    "c8-serenityos": {
      "title": "CHIP-8 Emulator for SerenityOS",
      "description": "A CHIP-8 emulator implementation built specifically for the SerenityOS operating system.",
      "fullDescription": "This project is a complete CHIP-8 emulator developed for SerenityOS, featuring accurate CPU emulation, graphics rendering, and sound support. CHIP-8 is a simple virtual machine designed in the 1970s for programming games, and this emulator brings those classic games to the modern SerenityOS platform with pixel-perfect accuracy.",
      "imagesCaptions": {
        "emulator": "CHIP-8 emulator main interface showing ROM selection",
        "gameplay": "Classic CHIP-8 game running with smooth rendering",
        "debugger": "Built-in debugger showing CPU state and memory"
      },
      "features": {
        "cpuEmulation": "Accurate CPU Emulation",
        "cpuEmulationDesc": "Precise implementation of the CHIP-8 instruction set with cycle-accurate timing and proper register handling.",
        "graphicsRendering": "Graphics Rendering",
        "graphicsRenderingDesc": "Pixel-perfect 64x32 monochrome display rendering with proper sprite collision detection.",
        "soundSystem": "Sound System",
        "soundSystemDesc": "Authentic beep sound generation matching the original CHIP-8 specifications.",
        "debuggerTools": "Debugging Tools",
        "debuggerToolsDesc": "Built-in debugger with disassembly view, register inspection, and step-by-step execution."
      }
    },
    "spring-library-api": {
      "title": "Spring Library Management API",
      "description": "A comprehensive REST API for library management built with Spring Boot and Java.",
      "fullDescription": "This project is a full-featured library management system backend built with Spring Boot. It provides REST API endpoints for managing books, authors, borrowers, and lending operations. The system includes proper data validation, exception handling, and follows REST principles for clean API design. Perfect for learning Spring Boot concepts or as a foundation for larger library management systems.",
      "imagesCaptions": {
        "apiEndpoints": "REST API endpoints for book and user management",
        "database": "Entity relationship diagram showing data structure",
        "documentation": "Interactive API documentation with Swagger"
      },
      "features": {
        "restfulApi": "RESTful API Design",
        "restfulApiDesc": "Clean and intuitive REST API following industry standards with proper HTTP methods and status codes.",
        "databaseIntegration": "Database Integration",
        "databaseIntegrationDesc": "Seamless integration with MongoDB using JPA and Hibernate for efficient data management.",
        "crudOperations": "Complete CRUD Operations",
        "crudOperationsDesc": "Full Create, Read, Update, Delete functionality for books, authors, and borrowing records.",
        "apiDocumentation": "API Documentation",
        "apiDocumentationDesc": "Comprehensive API documentation."
      }
    },
    "socket-fun": {
      "title": "SocketFun",
      "description": "Experimenting with sockets in C on Linux, featuring echo and chat servers with concurrent connection handling.",
      "fullDescription": "SocketFun is a learning project that explores socket programming in C on Linux. It includes both an Echo Server/Client and Chat Server/Client implementation, demonstrating concurrent connection handling using epoll(). The project showcases low-level network programming concepts and efficient I/O multiplexing techniques for handling multiple client connections simultaneously.",
      "imageCaptions": {
        "implementation": "C socket programming implementation",
        "echo": "Echo server reflecting client messages",
        "chat": "Multi-client chat server in action",
        "concurrent": "epoll() handling concurrent connections"
      },
      "features": {
        "echoServer": "Echo Server",
        "echoServerDesc": "TCP Echo Server that reflects client messages back, demonstrating basic client-server communication patterns.",
        "chatServer": "Chat Server", 
        "chatServerDesc": "Multi-client chat server enabling real-time communication between connected clients.",
        "concurrentConnections": "Concurrent Connections",
        "concurrentConnectionsDesc": "Support for up to 128 simultaneous client connections using efficient I/O multiplexing.",
        "epollHandling": "epoll() Implementation",
        "epollHandlingDesc": "High-performance event-driven I/O using Linux epoll() for scalable network applications."
      }
    },
    "world-launcher": {
      "title": "World-Launcher",
      "description": "A Windows launcher for Super Mario World ROM hacks with integrated patching capabilities using Floating IPS.",
      "fullDescription": "World-Launcher is a comprehensive Windows application designed for Super Mario World ROM hack enthusiasts. It combines ROM patching functionality with a user-friendly launcher interface, allowing users to easily patch ROM files with .bps or .ips patches and launch them directly in their preferred SNES emulator. The application integrates Floating IPS by Alcaro for reliable ROM patching and provides seamless emulator integration for an enhanced gaming experience.",
      "imageCaptions": {
        "interface": "Clean Windows Forms interface for ROM management",
        "patching": "Automated ROM patching with Floating IPS integration",
        "launcher": "Game launcher displaying available ROM hacks",
        "emulator": "Direct emulator integration with fullscreen options"
      },
      "features": {
        "romPatching": "ROM Patching",
        "romPatchingDesc": "Integrated Floating IPS patcher supporting .bps and .ips patch formats for reliable ROM modifications.",
        "gameLauncher": "Game Launcher",
        "gameLauncherDesc": "Easy-to-use launcher interface for organizing and starting ROM hacks directly from the application.",
        "emulatorIntegration": "Emulator Integration",
        "emulatorIntegrationDesc": "Seamless integration with SNES emulators like Snes9x, with fullscreen launch options.",
        "userFriendlyInterface": "User-Friendly Interface",
        "userFriendlyInterfaceDesc": "Intuitive Windows Forms interface making ROM hack management accessible to all users."
      }
    }
  },
  "gamesData": {
    "shooty": {
      "title": "Shooty",
      "description": "A fast-paced arcade shooter game written in Zig using Raylib.",
      "fullDescription": "Shooty is a fast-paced arcade shooter game built with Zig and Raylib. Players control a spaceship, battling against waves of enemies in intense arcade-style combat. Features smooth sprite animations, precise collision detection, and engaging gameplay mechanics.",
      "imageCaptions": {
        "gameplay": "Intense arcade shooting action",
        "shooting": "Player spaceship firing at enemies",
        "enemies": "Challenging enemy AI patterns",
        "gameover": "Game over screen with final score"
      },
      "features": {
        "spriteAnimation": "Sprite Animation",
        "spriteAnimationDesc": "Smooth and fluid sprite animations for characters, projectiles, and visual effects.",
        "collisionDetection": "Collision Detection",
        "collisionDetectionDesc": "Precise collision detection system for accurate hit detection and gameplay interactions.",
        "scoreSystem": "Scoring System",
        "scoreSystemDesc": "Dynamic scoring system with combo multipliers and bonus points for skilled play.",
        "soundEffects": "Sound Effects",
        "soundEffectsDesc": "Immersive audio feedback with shooting sounds, explosions, and ambient music."
      }
    },
    "pirate-game-jam-2025": {
      "title": "Living Armory",
      "description": "A Unity WebGL game developed for the Pirate Software Game Jam 2025, playable directly in your browser.",
      "fullDescription": "Living Armory is an exciting game jam entry created for the Pirate Software Game Jam 2025. This Unity WebGL project demonstrates the ability to rapidly prototype and develop a complete game concept within the constraints of a game jam timeline. The game is fully playable in your browser and showcases creative problem-solving, efficient development practices, and polished gameplay mechanics.",
      "imageCaptions": {
        "gameplay": "Fast-paced gameplay mechanics developed for the jam",
        "mechanics": "Unique game mechanics and player interactions",
        "development": "Unity development process and workflow",
        "submission": "Final game jam submission and presentation"
      },
      "features": {
        "gameJamDevelopment": "Game Jam Development",
        "gameJamDevelopmentDesc": "Complete game development cycle compressed into a game jam timeframe with focus on core mechanics.",
        "rapidPrototyping": "Rapid Prototyping",
        "rapidPrototypingDesc": "Quick iteration and testing of game concepts to validate ideas and refine gameplay mechanics.",
        "creativeChallenges": "Creative Problem Solving",
        "creativeChallengesDesc": "Innovative solutions to design challenges and creative interpretation of game jam themes.",
        "timeConstraints": "Time Management",
        "timeConstraintsDesc": "Efficient development workflow and prioritization to deliver a complete game within jam constraints."
      }
    },
    "spitting-sugar": {
      "title": "Spitting Sugar",
      "description": "A Portal-inspired first person puzzle game where you spit different sweets to solve challenges.",
      "fullDescription": "Spitting Sugar is an innovative first-person puzzle game inspired by Portal's mechanics. Players use unique sweet-spitting abilities to build bridges, defeat enemies, and solve complex puzzles. Developed during a game jam using Unity, this creative project showcases inventive gameplay mechanics and clever level design that transforms simple projectiles into versatile problem-solving tools. Sadly, the source code has been lost to time.",
      "imageCaptions": {
        "gameplay": "Spitting Sugar puzzle solving in action",
        "mechanics": "Sweet projectile mechanics and interactions",
        "puzzles": "Creative puzzle design and level layout",
        "development": "Game jam development process and iteration"
      },
      "features": {
        "sweetProjectiles": "Sweet Projectiles",
        "sweetProjectilesDesc": "Spit different types of candy with unique properties and effects to interact with the environment.",
        "bridgeBuilding": "Bridge Building",
        "bridgeBuildingDesc": "Create pathways and structures using sweet projectiles to reach new areas and solve puzzles.",
        "enemyCombat": "Enemy Combat",
        "enemyCombatDesc": "Defeat enemies using strategic sweet-based attacks and environmental interactions.",
        "portalInspiredPuzzles": "Portal-Inspired Puzzles",
        "portalInspiredPuzzlesDesc": "Complex environmental puzzles requiring creative thinking and innovative use of sweet mechanics.",
        "gameJamCreativity": "Game Jam Innovation",
        "gameJamCreativityDesc": "Unique mechanics and creative solutions developed under the constraints and creativity of a game jam."
      }
    }
  }
}
